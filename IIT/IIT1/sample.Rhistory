library("twitteR", lib.loc="C:/R/R-3.0.1/library")
cred<- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',requestURL='https://api.twitter.com/oauth/request_token',accessURL='http://api.twitter.com/oauth/access_token',authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
library("XML", lib.loc="C:/R/R-3.0.1/library")
library("tm", lib.loc="C:/R/R-3.0.1/library")
library("Snowball", lib.loc="C:/R/R-3.0.1/library")
library("rstudio", lib.loc="C:/R/R-3.0.1/library")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
cred<- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',requestURL='https://api.twitter.com/oauth/request_token',accessURL='http://api.twitter.com/oauth/access_token',authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
registerTwitterOAuth(cred)
library(twitteR)
library(plyr)
library(stringr)
function score.sentiment
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
# Parameters
# sentences: vector of text to score
# pos.words: vector of words of postive sentiment
# neg.words: vector of words of negative sentiment
# .progress: passed to laply() to control of progress bar
# create simple array of scores with laply
scores = laply(sentences,
function(sentence, pos.words, neg.words)
{
# remove punctuation
sentence = gsub("[[:punct:]]", "", sentence)
# remove control characters
sentence = gsub("[[:cntrl:]]", "", sentence)
# remove digits?
sentence = gsub('\\d+', '', sentence)
# define error handling function when trying tolower
tryTolower = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
# use tryTolower with sapply
sentence = sapply(sentence, tryTolower)
# split sentence into words with str_split (stringr package)
word.list = str_split(sentence, "\\s+")
words = unlist(word.list)
# compare words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# final score
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
# data frame with scores for each sentence
scores.df = data.frame(text=sentences, score=scores)
return(scores.df)
}
neg = readLines("c:\IIT\negative_words.txt")
neg = readLines('c:\IIT\negative_words.txt')
neg = readLines("c:/IIT/negative_words.txt")
neg = readLines("c:/IIT/negative-words.txt")
neg1 = readLines("c:/IIT/negative-words.txt")
neg1 = readLines("c:/IIT/negative-words.txt")
manutd=searchTwitter("#mufc",n=2699)
manutd=searchTwitter("#mufc",n=2699,cainfo="cacert.pem")
length(manutd)
manutd.text = laply(tweets,function(t)t$getText())
manutd.text = laply(manutd,function(t)t$getText())
pos = scan('c:/IIT/positive-words.txt', what='character', comment.char=';')
neg = scan('c:/IIT/negative-words.txt', what='character', comment.char=';')
analysisutd = score.sentiment(manutd.text, pos, neg)
table(analysis$score)
table(analysisutd$score)
mean(analysis$score)
mean(analysisutd$score)
hist(analysisutd$score)
scores = score.sentiment(manutd_txt, pos, neg, .progress='text')
scores = score.sentiment(manutd, pos, neg, .progress='text')
scores = score.sentiment(manutd.text, pos, neg, .progress='text')
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
numpos = sum(scores$very.pos)
numneg = sum(scores$very.neg)
cols = c("#7CAE00")
names(cols) = c("manutd")
plot(scores)
plot(manutd.text)
plot(manutd)
meanscore = tapply(scores$score)
means$score = tapply(scores$score)
meanscore=c(scores)
ggplot(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=scores, fill=scores)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
ggplot2(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=scores, fill=scores)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
install.packages("ggplot2", dependencies=TRUE)
ggplot2(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=scores, fill=scores)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
ggplot(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=scores, fill=scores)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
ggplot2(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=scores, fill=scores)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
data(manutd, package="ggplot2")
data(manutd.text, package="ggplot2")
data(analysisutd, package="ggplot2")
manutd_pos = ddply(scores, summarise, mean_pos=mean(very.pos))
manutd_pos = ddply(scores,.(scores) ,summarise, mean_pos=mean(very.pos))
fix(score.sentiment)
fix(score.sentiment)
analysisutd = score.sentiment(manutd.text, pos, neg)
savehistory("C:/IIT/IIT/IIT1/sample.Rhistory")
