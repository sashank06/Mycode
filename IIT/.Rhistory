library("bitops", lib.loc="C:/R/R-3.0.1/library")
detach("package:bitops", unload=TRUE)
install.packages(c("ROAuth", "wordcloud"))
library("twitteR")
library("XML")
library("xml")
install("XML")
install.packages('XML')
install.packages("XML")
require(XML)
mydata.vectors<-character(0)
twitter_q <- URLencode('#prolife OR #prochoice')
twitter_url = paste('http://search.twitter.com/search.atom?q=',twitter_q,'&rpp=100&page=', page, sep='')
twitter_url = paste('https://twitter.com/search?q=United%20transfer&src=tyah')
mydata.xml <- xmlParseDoc(twitter_url, asText=F)
install.packages('RCurl')
install.packages('bitops')
install.packages('digest')
install.packages('ROAuth')
install.packages('RJSONIO')
fix(mydata.vectors)
library('bitops')
library('digest')
library('RCurl')
library('ROAuth')
library('RJSONIO')
library('plyr')
options(digits=22)
oauth <- data.frame(consumerKey='YoUrCoNsUmErKeY',consumerSecret='YoUrCoNsUmErSeCrEt',accessToken='YoUrAcCeSsToKeN',accessTokenSecret='YoUrAcCeSsToKeNsEcReT')
keyValues <- function(httpmethod,baseurl,par1a,par1b){
# Generate a random string of letters and numbers
string <- paste(sample(c(letters[1:26],0:9),size=32,replace=T),collapse='') # Generate random string of alphanumeric characters
string2 <- base64(string,encode=TRUE,mode='character') # Convert string to base64
nonce <- gsub('[^a-zA-Z0-9]','',string2,perl=TRUE) # Remove non-alphanumeric characters
fromJSON(getURL(paste('https://api.twitter.com/1.1/application/rate_limit_status.json?resources=statuses&oauth_consumer_key=',oauth$consumerKey,'&oauth_nonce=',kv$nonce,'&oauth_signature=',kv$osign,'&oauth_signature_method=HMAC-SHA1&oauth_timestamp=',kv$timestamp,'&oauth_token=',oauth$accessToken,'&oauth_version=1.0',sep='')))
}
fromJSON(getURL(paste('https://api.twitter.com/1.1/application/rate_limit_status.json?resources=statuses&oauth_consumer_key=',oauth$consumerKey,'&oauth_nonce=',kv$nonce,'&oauth_signature=',kv$osign,'&oauth_signature_method=HMAC-SHA1&oauth_timestamp=',kv$timestamp,'&oauth_token=',oauth$accessToken,'&oauth_version=1.0',sep='')))
osign <- hmac(key=signKey,object=signBaseString,algo='sha1',serialize=FALSE,raw=TRUE)
osign641 <- base64(osign,encode=TRUE,mode='character')
osign642 <- gsub('/','%2F',osign641,perl=TRUE)
osign643 <- gsub('=','%3D',osign642,perl=TRUE)
osign644 <- gsub('[+]','%2B',osign643,perl=TRUE)
kv <-data.frame(nonce=nonce[1],timestamp=timestamp,osign=osign644[1])
options(RCurlOptions = list( capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
install.packages('twitteR', dependencies=T)
library(twitteR)
delta.tweets = searchTwitter('@delta', n=1500)
tw<-OAuthFactory$new(consumerKey="mykeyhere",consumerSecret="mysecrethere",
requestURL="http://api.twitter.com/oauth/request_token",
accessURL="http://api.twitter.com/oauth/access_token",
authURL="http://api.twitter.com/oauth/authorize")
tw<-handshake()
tw<-OAuthFactory$new(consumerKey="mykeyhere",consumerSecret="mysecrethere",
requestURL="http://api.twitter.com/oauth/request_token",
accessURL="http://api.twitter.com/oauth/access_token",
authURL="http://api.twitter.com/oauth/authorize")
registerTwitterOAuth(tw)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "myconsumerkeystring"
consumerSecret = "myconsumersecretstring"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
registerTwitterOAuth(Cred)
tw<-OAuthFactory$new(consumerKey="mykeyhere",consumerSecret="mysecrethere",
requestURL="http://api.twitter.com/oauth/request_token",
accessURL="http://api.twitter.com/oauth/access_token",
authURL="http://api.twitter.com/oauth/authorize")
tw<-handshake()
install.packages("Snowball")
library(twitteR)
rdmTweets <- userTimeline("rdatamining", n=100)
cred = getTwitterOAuth(Nuu08ZN8bPtQhgOdDIuQ,5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8)
cred<-getTwitterOAuth(Nuu08ZN8bPtQhgOdDIuQ,5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8)
tw<-OAuthFactory$new(consumerKey="Nuu08ZN8bPtQhgOdDIuQ",consumerSecret="5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8",
requestURL="http://api.twitter.com/oauth/request_token",
accessURL="http://api.twitter.com/oauth/access_token",
authURL="http://api.twitter.com/oauth/authorize")
tw<-handshake()
cred <- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',
consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
save(cred, file="twitter authentication.Rdata")
registerTwitterOAuth(cred)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem"
)
cred <- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',
consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
>
cred <- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',
consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
save(cred, file="twitter authentication.Rdata")
registerTwitterOAuth(cred)
r_stats<- searchTwitter("#Rstats", n=1500, cainfo="cacert.pem")
fix(r_stats)
rm(r_stats)
manutd= searchTwitter("#Mufc", n=2000, cainfo="cacert.pem")
fix(manutd)
Tweets.text = laply(manutd,function(t)t$getText())
install.packages("plyr")
Tweets.text = laply(manutd,function(t)t$getText())
manutd_txt = sapply(manutd, function(x) x$getText())
fix(manutd_txt)
rm(manutd_txt)
rm(manutd)
manutd= searchTwitter("#Mufc", n=200000, cainfo="cacert.pem")
manutd_txt = sapply(manutd, function(x) x$getText())
pos = readLines("positive_words.txt")
pos = readLines("positive_words.txt")
pos = scan('c:/IIT/positive-words.txt', what='character', comment.char=';')
neg = scan('c:/IIT/negative-words.txt', what='character', comment.char=';')
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
analysismanutd = score.sentiment(manutd_txt, pos, neg)
table(analysis$score)
table(analysismanutd$score)
mean(analysismanutd$score)
hist(analysismanutd$score)
plot(analysismanutd$score)
scores = score.sentiment(ari_txt, pos, neg, .progress='text')
scores = score.sentiment(manutd_txt, pos, neg, .progress='text')
scores$drink = factor(rep(c("manutd"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
scores$drink = factor(rep(c("manutd"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
nd = c(length(manutd_txt))
scores$drink = factor(rep(c("manutd"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
numpos = sum(scores$very.pos)
numneg = sum(scores$very.neg)
cols = c("#7CAE00")
names(cols) = c("united transfer")
meanscore = tapply(scores$score, scores$manutd, mean)
df = data.frame(manutd=names(meanscore), meanscore=meanscore)
df$manutd <- reorder(df$manutd, df$meanscore)
meanscore = tapply(scores$score, scores$drink, mean)
df = data.frame(drink=names(meanscore), meanscore=meanscore)
df$manutd <- reorder(df$drink, df$meanscore)
ggplot(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=manutd, fill=manutd)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
plot(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=manutd, fill=manutd)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
scores$manutd = factor(rep(c("manutd"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
meanscore = tapply(scores$score, scores$manutd, mean)
df = data.frame(manutd=names(meanscore), meanscore=meanscore)
df$manutd <- reorder(df$manutd, df$meanscore)
library(ggplot2)
meanscore = tapply(scores$score, scores$manutd, mean)
df = data.frame(manutd=names(meanscore), meanscore=meanscore)
df$manutd <- reorder(df$manutd, df$meanscore)
ggplot(df, aes(y=meanscore)) +
geom_bar(data=df, aes(x=manutd, fill=manutd)) +
scale_fill_manual(values=cols[order(df$meanscore)]) +
opts(title = "Average Sentiment Score",
legend.position = "none")
plot(scores$manutd)
plot(scores$very.pos)
plot(scores$very.neg)
plot(meanscore)
plot(manutd_txt)
plot(scores)
mancity=searchTwitter("#Manchestercity", n=2000, cainfo="cacert.pem")
mancity_txt = sapply(mancity, function(x) x$getText())
pos = scan('c:/IIT/positive-words.txt', what='character', comment.char=';')
neg = scan('c:/IIT/negative-words.txt', what='character', comment.char=';')
analysismanutd = score.sentiment(mancity_txt, pos, neg)
nd = c(length(manutd_txt),length(mancity_txt))
scores$2clubs = factor(rep(c("manutd","mancity"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
scores$manclubs = factor(rep(c("manutd","mancity"), nd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
fd = c(length(manutd_txt),length(mancity_txt))
scores$manclubs = factor(rep(c("manutd", "mancity", fd))
)
scores$manclubs = factor(rep(c("manutd", "mancity"), fd))
fd = c(length(mancity_txt))
scores$manclubs = factor(rep(c("mancity"), fd))
plot(analysismanutd)
analysismanutd = score.sentiment(manutd_txt, pos, neg)
plot(analysismanutd)
analysismancity = score.sentiment(mancity_txt, pos, neg)
plot(analysismancity)
table(analysismancity$score)
hist(analysismancity$score)
scorescity = score.sentiment(mancity_txt, pos, neg, .progress='text')
fd = c(length(manutd_txt),length(mancity_txt))
scores$manclubs = factor(rep(c("manutd","mancity"),fd))
cols = c("#7CAE00", "#00BFC4")
names(cols) = c("united", "city")
meanscorecity = tapply(scores$score, scores$city, mean)
df = data.frame(city=names(meanscore), meanscore=meanscore)
df$drinks <- reorder(df$drink, df$meanscore)
fd = c(length(length(mancity_txt))
fd = c(length(mancity_txt))
nd = c(length(mancity_txt))
nd = c(length(manutd_txt))
fd = c(length(mancity_txt))
scores$drink = factor(rep(c("mancity"), fd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
scores$city = factor(rep(c("mancity"), fd))
scores$very.pos = as.numeric(scores$score >= 2)
scores$very.neg = as.numeric(scores$score <= -2)
score_neg = ddply(scores, .(mqnutd), summarise, mean_neg=mean(very.neg))
score_neg$utd <- reorder(manutd$score, manutd_neg$mean_neg)
score_neg = ddply(scores, .(mqnutd), summarise, mean_neg=mean(very.neg))
score_neg$utd <- reorder(manutd$score, manutd$mean_neg)
score_neg = ddply(scores, .(manutd), summarise, mean_neg=mean(very.neg))
score_neg$utd <- reorder(manutd$score, manutd$mean_neg)
rm(analysismancity)
rm(scorescity)''
rm(scorescity)
rm(mancity)
rm(mancity_txt)
manutdsecond= searchTwitter("#Mufc", n=2699, cainfo="cacert.pem")
manutdsecond= searchTwitter("#Mufc", n=2699, cainfo="cacert.pem")
manutdsecond_txt = sapply(manutdsecond, function(x) x$getText())
analysismanutdsecond = score.sentiment(manutdsecond_txt, pos, neg)
plot(analysismanutdsecond)
table(analysismanutdsecond)
mean(analysismanutdsecond)
mean(analysismanutdsecond_txt)
mean(manutdsecond_txt)
hist(analysismanutdsecond)
analysis$manutdsecond = score.sentiment(manutdsecond_txt, pos, neg)
manutdthird=searchTwitter("#MUFC",n=2699,cainfo="cacert.pem")
twitCred <- OAuthFactory$new(consumerKey=Nuu08ZN8bPtQhgOdDIuQ
,
consumerSecret=5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
twitCred <- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ'
,
consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',
requestURL='    https://api.twitter.com/oauth/request_token',
accessURL=' https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/access_token')
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
cred<- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',requestURL='https://api.twitter.com/oauth/request_token',accessURL='http://api.twitter.com/oauth/access_token',aithURL='http://api.twitter.com/oauth/authorize')
cred<- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',requestURL='https://api.twitter.com/oauth/request_token',accessURL='http://api.twitter.com/oauth/access_token',authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
cred<- OAuthFactory$new(consumerKey='Nuu08ZN8bPtQhgOdDIuQ',consumerSecret='5OXfRDE4VJ4YdLdWSPyQFbZN0S1GW7rtODibTBHsq8',requestURL='https://api.twitter.com/oauth/request_token',accessURL='http://api.twitter.com/oauth/access_token',authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
registerTwitterOAuth(cred)
analysis$manutdsecond = score.sentiment(manutdsecond_txt, pos, neg)
manutdthird=searchTwitter("#MUFC",n=2699,cainfo="cacert.pem")
manutdthird=searchTwitter("#Mufc", n=2699 , cainfo="cacert.pem" )
library(twitteR)
install.packages(twitteR)
library('twitteR')
library('XML')
library("Snowball", lib.loc="C:/R/R-3.0.1/library")
install.packages("Snowball")
manutdthird=searchTwitter("#Mufc", n=2699 , cainfo="cacert.pem" )
install.packages("RCurl")
library("tm", lib.loc="C:/R/R-3.0.1/library")
manutdthirddata=searchTwitter("#Mufc", n=2699 , cainfo="cacert.pem" )
footy=searchTwitter("#football", n=2699 , cainfo="cacert.pem" )
footy_txt=sapply(footy,function(x_ x$getText()))
footy_txt=sapply(footy,function(x) x$getText()))
footy_txt=sapply(footy,function(x) x$getText())
pos=scan('c:/IIT/positive-words.rxt',what='character',comment.char';')
pos=scan('c:/IIT/positive-words.txt',what='character',comment.char';')
pos = scan('c:/IIT/positive-words.txt',what='character',comment.char';')
posi = scan('c:/IIT/positive-words.txt',what='character',comment.char';')
analysis$footy=score.sentiment(footy_txt,pos,neg)
analysisfooty=score.sentiment(footy_txt,pos,neg)
mean(analysisfooty)
mean(analysisfooty)
mean(analysis$footy)
mean(analysis$footyscore)
mean(footy$score)
table(analysis$score)
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
analysis$footy=score.sentiment(footy_txt,pos,neg)
mean(analysis$footyscore)
table(analysisfooty)
plot(analysisfooty)
